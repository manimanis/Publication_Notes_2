package tn.manianis.frames;

import java.io.FileWriter;
import java.io.IOException;
import java.util.concurrent.CompletableFuture;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JInternalFrame;
import javax.swing.SwingUtilities;
import org.apache.commons.csv.CSVFormat;
import org.apache.commons.csv.CSVPrinter;
import tn.manianis.XmlFile;
import tn.manianis.XmlFilesFinder;
import tn.manianis.entities.Epreuve;
import tn.manianis.entities.EpreuvesCollection;
import tn.manianis.entities.Groupe;
import tn.manianis.entities.entities.secondary.XmlFileEntry;
import tn.manianis.entities.entities.secondary.XmlFileEntryCollection;
import tn.manianis.tablemodels.XmlFilesEntriesModel;
import tn.manianis.utils.ComponentUtils;

/**
 *
 * @author manianis
 */
public class ExportFilesFrame extends JInternalFrame {

    private XmlFilesEntriesModel tableModel;
    private String xmlFolder;
    private String csvFolder;

    /**
     * Creates new form ExportFilesFrame
     */
    public ExportFilesFrame() {
        super("", true, true, true, false);
        tableModel = new XmlFilesEntriesModel(new XmlFileEntryCollection());
        initComponents();
        ComponentUtils.setOrientationRTL(rootPane);
        setTableColumnsWidths();
    }

    private void setTableColumnsWidths() {
        tableXmlFiles.getColumnModel().getColumn(0).setPreferredWidth(40);
        tableXmlFiles.getColumnModel().getColumn(1).setPreferredWidth(120);
        tableXmlFiles.getColumnModel().getColumn(2).setPreferredWidth(200);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        lblSrcFolder = new javax.swing.JLabel();
        txtSrcFolder = new javax.swing.JTextField();
        btnSrcSearchFolder = new javax.swing.JButton();
        scrollTableFiles = new javax.swing.JScrollPane();
        tableXmlFiles = new javax.swing.JTable();
        lblFormat = new javax.swing.JLabel();
        cmbFormat = new javax.swing.JComboBox<>();
        btnTranform = new javax.swing.JButton();

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(jTable1);

        java.awt.GridBagLayout layout = new java.awt.GridBagLayout();
        layout.columnWidths = new int[] {0, 0, 0, 0, 0, 200, 0};
        layout.rowHeights = new int[] {0, 300, 0, 0};
        layout.columnWeights = new double[] {1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0};
        layout.rowWeights = new double[] {1.0, 5.0, 1.0, 1.0};
        getContentPane().setLayout(layout);

        lblSrcFolder.setText("المجلد");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        getContentPane().add(lblSrcFolder, gridBagConstraints);

        txtSrcFolder.setEditable(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridwidth = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        getContentPane().add(txtSrcFolder, gridBagConstraints);

        btnSrcSearchFolder.setText("بحث...");
        btnSrcSearchFolder.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSrcSearchFolderActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        getContentPane().add(btnSrcSearchFolder, gridBagConstraints);

        tableXmlFiles.setModel(tableModel);
        scrollTableFiles.setViewportView(tableXmlFiles);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 7;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        getContentPane().add(scrollTableFiles, gridBagConstraints);

        lblFormat.setText("الصيغة");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        getContentPane().add(lblFormat, gridBagConstraints);

        cmbFormat.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "CSV" }));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        getContentPane().add(cmbFormat, gridBagConstraints);

        btnTranform.setText("بدء التحويل...");
        btnTranform.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnTranformActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridwidth = 7;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 5;
        gridBagConstraints.ipady = 16;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        getContentPane().add(btnTranform, gridBagConstraints);

        setBounds(0, 0, 798, 426);
    }// </editor-fold>//GEN-END:initComponents

    private String selectFolder(String title) {
        JFileChooser chooser = new JFileChooser();
        chooser.setCurrentDirectory(new java.io.File("."));
        chooser.setDialogTitle(title);
        chooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        //
        // disable the "All files" option.
        //
        chooser.setAcceptAllFileFilterUsed(false);
        //    
        if (chooser.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
            return chooser.getSelectedFile().getAbsolutePath();
        }
        return null;
    }

    private void searchFolderForXmlFiles() {
        final WaitDialog waitDialog = new WaitDialog((JFrame) SwingUtilities.getWindowAncestor(this), true);
        CompletableFuture.runAsync(() -> {
            SwingUtilities.invokeLater(() -> {
                waitDialog.setVisible(true);
            });

            XmlFileEntryCollection xmlFiles = XmlFilesFinder.findXmlFiles(xmlFolder);

            SwingUtilities.invokeLater(() -> {
                tableModel.setCollection(xmlFiles);
                setTableColumnsWidths();
                waitDialog.setVisible(false);
                waitDialog.dispose();
            });
        });
    }

    private void processXmlFiles() {
        final WaitDialog waitDialog = new WaitDialog((JFrame) SwingUtilities.getWindowAncestor(this), true);
        CompletableFuture.runAsync(() -> {
            SwingUtilities.invokeLater(() -> {
                waitDialog.setVisible(true);
            });

            XmlFileEntryCollection xmlFiles = tableModel.getCollection();
            for (XmlFileEntry fileEntry : xmlFiles) {
                if (!fileEntry.getChecked()) {
                    continue;
                }
                try {
                    Groupe groupe = XmlFile.loadFile(fileEntry.getFilepath());
                    EpreuvesCollection epreuves = MainFrame.getConnection().fetchCoefficients(
                            groupe.getDiscipline().getCodeMatiere(),
                            groupe.getClasse().getCodeNiveau(),
                            groupe.getPeriodeExamen().getCodePeriodeExamen());
                    for (Epreuve epreuve : epreuves) {
                        int p = groupe.getEpreuves().findByIds(
                                epreuve.getDiscipline().getCodeMatiere(),
                                epreuve.getCodeTypeMatiere(),
                                epreuve.getCodeTypeEpreuve()
                        );
                        if (p != -1) {
                            groupe.getEpreuve(p).setCoefficient(epreuve.getCoefficient());
                        }
                    }
                    groupe.getRowCollection().recalcAverages();
                    createCSVFile(fileEntry.getFilepath(), groupe);
                } catch (Exception ex) {
                    Logger.getLogger(ExportFilesFrame.class.getName()).log(Level.SEVERE, null, ex);
                }
            }

            SwingUtilities.invokeLater(() -> {
                waitDialog.setVisible(false);
                waitDialog.dispose();
            });
        });
    }

    public void createCSVFile(String fileName, Groupe groupe) throws IOException {
        FileWriter out = new FileWriter(fileName + ".csv");
        int colCount = 5 + groupe.getEpreuves().size();
        String[] staticHeaders = {
            " ع.ر", "المعرف", "الإسم واللقب", "المعدل", "الملاحظة"
        };
        String[] headers = new String[colCount];
        for(int i = 0; i < colCount; i++) {
            if (i < 3) {
                headers[i] = staticHeaders[i];
            } else if (i >= colCount - 2) {
                headers[i] = staticHeaders[i-colCount+5];
            } else {
                headers[i] = groupe.getEpreuves().get(i-3).getNomEpreuve();
            }
        }
        try ( CSVPrinter printer = new CSVPrinter(out, CSVFormat.DEFAULT
                .withHeader(headers))) {
            for (int i = 0; i < groupe.getNbreEleves(); i++) {
                Object[] eleveRow = groupe.getEleveRow(i).getAsArray();
                printer.printRecord(eleveRow);
            }
        }
    }

    private void btnSrcSearchFolderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSrcSearchFolderActionPerformed
        String srcFolder = selectFolder("الرجاء إختيار مجلد");
        if (srcFolder == null || srcFolder.isEmpty()) {
            return;
        }
        xmlFolder = srcFolder;
        txtSrcFolder.setText(xmlFolder);
        searchFolderForXmlFiles();
    }//GEN-LAST:event_btnSrcSearchFolderActionPerformed

    private void btnTranformActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnTranformActionPerformed
        processXmlFiles();
    }//GEN-LAST:event_btnTranformActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnSrcSearchFolder;
    private javax.swing.JButton btnTranform;
    private javax.swing.JComboBox<String> cmbFormat;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JLabel lblFormat;
    private javax.swing.JLabel lblSrcFolder;
    private javax.swing.JScrollPane scrollTableFiles;
    private javax.swing.JTable tableXmlFiles;
    private javax.swing.JTextField txtSrcFolder;
    // End of variables declaration//GEN-END:variables
}
